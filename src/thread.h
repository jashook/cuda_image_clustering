/* ************************************************************************** */
/* ************************************************************************** */
/*                                                                            */
/* Author: Jarret Shook                                                       */
/*                                                                            */
/* Module: thread.h                                                           */
/*                                                                            */
/* Modifications:                                                             */
/*                                                                            */
/* 3-May-14: Version 1.0: Created                                             */
/*                                                                            */
/* Timeperiod: ev8                                                            */
/*                                                                            */
/* ************************************************************************** */
/* ************************************************************************** */

#ifndef __THREAD_H__
#define __THREAD_H__

/* ************************************************************************** */
/* ************************************************************************** */

#include <process.h>
#include <Windows.h>

/* ************************************************************************** */
/* ************************************************************************** */

#define HOST_THREAD 0
#define CUDA_THREAD 1

/* ************************************************************************** */
/* ************************************************************************** */

typedef struct thread
{
    #ifdef __CUDA__
        __global int (*cuda_entry_function)(void*);
    #endif

    int (*entry_function)(void*);   /* Entry Function           */

    size_t exit_code;               /* Exit value               */
    HANDLE handle;                  /* Handle to thread         */
    size_t is_active;               /* True if running          */
    size_t is_alive;                /* True if initialized      */
    size_t stack_size;              /* Size of the local stack  */
    void* start_arg;                /* Start arg                */
    size_t thread_id;               /* Thread ID                */

} thread;

/* ************************************************************************** */
/* ************************************************************************** */

void thread_join(thread*);
size_t thread_start(thread*);
void thread_sleep(thread*);

/* ************************************************************************** */
/* ************************************************************************** */
